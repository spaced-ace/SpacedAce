package components

import (
	"fmt"
	"spaced-ace/models/business"
)

type PreviewQuizPopupProps struct {
	Quiz        *business.Quiz
	QuizSession *business.QuizSession
}

templ PreviewQuizPopup(props PreviewQuizPopupProps) {
	<div
		id="preview-quiz-popup"
		class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-999 pl-[130px]"
	>
		<div class="flex flex-col gap-y-4 rounded-md border border-gray-300 bg-gray-100 p-4 drop-shadow w-[500px]">
			<span class="text-ellipsis text-2xl font-semibold">{ props.Quiz.Title }</span>
			<span class="text-ellipsis text-base text-gray-800 font-medium max-h-[220px] overflow-y-auto">{ props.Quiz.Description }</span>
			<div id="quiz-preview-popup-actions" class="flex p-1 gap-x-1 items-center w-full">
				<div class="p-2">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="1.5"
						stroke="currentColor"
						class="size-6"
					>
						<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z"></path>
					</svg>
				</div>
				<span class="text-base font-medium w-full">{ props.Quiz.CreatorName }</span>
				<div class="w-full"></div>
				<div
					id="quiz-preview-popup-edit-quiz-button"
					hx-get={ fmt.Sprintf("quizzes/%s/edit", props.Quiz.Id) }
					hx-target="main"
					hx-headers={ fmt.Sprint(`{ "SA-popup-action": "close" }`) }
					hx-push-url="true"
					class="hover:bg-gray-200 rounded-md p-2"
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"></path>
					</svg>
				</div>
				<div
					id="quiz-preview-popup-delete-quiz-button"
					hx-delete={ fmt.Sprintf("quizzes/%s", props.Quiz.Id) }
					hx-target="#preview-quiz-popup"
					hx-confirm="Are you sure you want to delete this quiz? This action cannot be undone."
					hx-push-url="false"
					class="hover:bg-gray-200 rounded-md p-2"
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"></path>
					</svg>
				</div>
				<div
					id="quiz-preview-popup-share-quiz-button"
					class="hover:bg-gray-200 rounded-md p-2"
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15m0-3-3-3m0 0-3 3m3-3V15"></path>
					</svg>
				</div>
			</div>
			<div
				id="preview-quiz-popup-buttons"
				class="flex justify-between"
			>
				<div class="w-min">
					@Button(ButtonProps{
						Text:  "Close",
						HxGet: "/close-popup",
						Attributes: templ.Attributes{
							"hx-target": "#popup-container",
						},
						Color: ButtonColorRed,
					})
				</div>
				<div class="w-min">
					if props.QuizSession != nil {
						@Button(ButtonProps{
							Text:  "Continue",
							HxGet: fmt.Sprintf("quizzes/%s/take/%s", props.Quiz.Id, props.QuizSession.Id),
							Attributes: templ.Attributes{
								"hx-target":   "main",
								"hx-swap":     "outerHTML",
								"hx-headers":  fmt.Sprint(`{ "SA-popup-action": "close" }`),
								"hx-push-url": "true",
							},
							Color: ButtonColorWhite,
						})
					} else {
						@Button(ButtonProps{
							Text:     "Continue",
							Disabled: true,
							Color:    ButtonColorWhite,
						})
					}
				</div>
				<div class="w-min">
					@Button(ButtonProps{
						Text:  "Start",
						HxGet: fmt.Sprintf("quizzes/%s/take", props.Quiz.Id),
						Attributes: templ.Attributes{
							"hx-target":   "main",
							"hx-swap":     "outerHTML",
							"hx-headers":  fmt.Sprint(`{ "SA-popup-action": "close" }`),
							"hx-push-url": "true",
						},
						Color: ButtonColorBlue,
					})
				</div>
			</div>
		</div>
	</div>
}
