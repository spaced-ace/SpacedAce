package pages

import (
	"fmt"
	"spaced-ace/models/business"
	"spaced-ace/models/request"
	"spaced-ace/views/components"
	"spaced-ace/views/forms"
)

templ EditQuizPage(viewModel EditQuizPageViewModel) {
	<main class="flex h-full w-full flex-col gap-y-8 p-6">
		<div id="breadcrumb" class="flex w-full items-center gap-x-1.5">
			<span
				hx-get="/my-quizzes"
				hx-push-url="true"
				hx-target="main"
				hx-swap="outerHTML"
				class="cursor-pointer text-base font-semibold text-nowrap hover:underline"
			>
				My quizzes
			</span>
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
				<path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
			</svg>
			<span
				hx-get={ fmt.Sprintf("/quizzes/%s/edit", viewModel.Quiz.Id) }
				hx-push-url="true"
				hx-target="main"
				hx-swap="outerHTML"
				class="cursor-pointer text-base font-semibold text-nowrap hover:underline"
			>
				{ viewModel.Quiz.Title }
			</span>
		</div>
		<div id="forms" class="flex flex-col gap-y-4 overflow-y-auto">
			<div class="flex w-full justify-center">
				@forms.UpdateQuizForm(
					request.UpdateQuizRequestForm{
						QuizId:      viewModel.Quiz.Id,
						Title:       viewModel.Quiz.Title,
						Description: viewModel.Quiz.Description,
					},
					map[string]string{},
					map[string]string{},
				)
			</div>
			<div class="flex w-full justify-center">
				<hr class="w-[700px]"/>
			</div>
			<div class="flex w-full flex-col items-center">
				@forms.GenerateQuestionForm(
					false,
					nil,
					request.GenerateQuestionForm{
						QuizId: viewModel.Quiz.Id,
					},
					map[string]string{},
				)
				<div
					id="questions"
					class="flex w-full sm:w-[700px] flex-col gap-y-2"
				>
					for _, q := range viewModel.Quiz.Questions {
						switch question := q.(type) {
							case *business.SingleChoiceQuestion:
								@components.SingleChoiceQuestion(components.SingleChoiceQuestionProps{
									QuizSession:               nil,
									Question:                  question,
									Answer:                    nil,
									AllowDeleting:             true,
									ReplacePlaceholderWithOOB: false,
								})
							case *business.MultipleChoiceQuestion:
								@components.MultipleChoiceQuestion(components.MultipleChoiceQuestionProps{
									QuizSession:               nil,
									Question:                  question,
									Answer:                    nil,
									AllowDeleting:             true,
									ReplacePlaceholderWithOOB: false,
								})
							case *business.TrueOrFalseQuestion:
								@components.TrueOrFalseQuestion(components.TrueOrFalseQuestionProps{
									QuizSession:               nil,
									Question:                  question,
									Answer:                    nil,
									AllowDeleting:             true,
									ReplacePlaceholderWithOOB: false,
								})
						}
					}
				</div>
				<div class="w-full sm:hidden h-12"></div>
			</div>
		</div>
	</main>
}
